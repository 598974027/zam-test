一级缓存
Mybatis的一级缓存的使用不需要我们配置,一级缓存是基于PerpetualCache的HashMap本地缓存，其存储作用域为Session，
当Session flush或close 之后，该Session中的所有Cache就将清空。
MyBatis 默认是开启一级缓存的，MyBatis会在一次会话中，一个SqlSession对象中创建一个本地缓存(local cache)，
对于每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中，如果在缓存中，就直接从缓存中取出，然后返回给用户；
否则，从数据库读取数据，将查询结果存入缓存并返回给用户。

二级缓存
如果需要开启二级缓存，resultMap的对应的实体类必须要序列化，不然会报java.io.NotSerializableException。
Mybatis的二级缓存与一级缓存其机制相同，默认也是采用PerpetualCache，HashMap存储，不同在于其存储作用域为Mapper(Namespace),也是一个内存级别的缓存。
默认的二级缓存功能如下：
1.映射语句文件中所有的select语句将会被缓存；
2.映射语句文件中所有的insert update delete语句会刷新缓存；
3.缓存会使用(Least Flush Interval,LRU最近最少使用的)算法来收回；
4.根据时间表(如No Flush Interval,没有刷新间隔)，缓存不会以任何时间顺序来刷新；
5.缓存会存储集合或对象(无论查询方法返回什么类型的值)的1024个引用；
6.缓存会被视为read/wriete(可读/可写)的，意味着对象检索不是共享的，而且可以安全的被调用者修改，而不干扰其他调用者或者线程所做的潜在修改。
举例：
<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>
上面配置的意思是创建了一个FIFP缓存，每隔60S刷新一次，存储集合或对象的512个引用，而且返回的对象被认为是只读的，因而在不同线程中的调用者之间修改它们会导致冲突。
配置属性详解如下
eviction回收策略:
1.LRU 最近最少使用的，移除最长时间不被使用的对象，这是默认值；
2.FIFO 先进先出，按对象进入缓存的顺序来移除它们；
3.SOFT 软引用，移除基于垃圾回收器状态和软引用规则的对象；
4.WEAK 弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象；
flushInterval刷新间隔
可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况不设置，即没有刷新间隔，缓存仅仅在调用语句时刷新。
size引用数目
可以被设置为任意的正整数，要记住缓存的对象数目和运行环境的可用内存资源数目，默认1024。
readOnly只读
属性可以被设置为true后者false。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，这提供了很重要的性能优势。
可读写的缓存会通过序列化返回缓存对象的拷贝，这种方式会慢一些，但很安全，因此默认为false。

结合Ehcache实现Mybatis二级缓存
由于Mybatis自己实现的二级缓存不是很好,所以我们需要整合第三方缓存框架,可以实现分布式缓存和中央缓存。
举例：
<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
二级缓存的说明
1.缓存是以namespace为单位的，不同namespace下的操作互不影响；
2.insert,update,delete操作会清空所在namespace下的全部缓存；
3.通常使用MyBatis Generator生成的代码中，都是各个表独立的，每个表都有自己的namespace。
多表操作下不能使用二级缓存
注意：Mybatis二级缓存对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用Mybatis二级缓存技术降低数据库访问量，提高访问速度。 如果需要多表,以及数据多变的缓存建议使用redis，多表操作一定一定不能使用二级缓存，这样会导致数据不一致的问题。
